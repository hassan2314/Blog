#!/usr/bin/env node

/**
 * Blog Creation API Test Script
 * 
 * This script tests the blog creation functionality programmatically
 * Run with: node test-blog-api.js
 */

const { Client, Databases, Storage, Account, ID } = require('node-appwrite');
const fs = require('fs');
const path = require('path');

// Configuration - Update these with your Appwrite settings
const config = {
    endpoint: 'https://fra.cloud.appwrite.io/v1', // Your Appwrite endpoint
    projectId: 'YOUR_PROJECT_ID',                  // Your project ID
    databaseId: 'YOUR_DATABASE_ID',                // Your database ID
    collectionId: 'YOUR_COLLECTION_ID',            // Your posts collection ID
    bucketId: 'YOUR_BUCKET_ID',                    // Your storage bucket ID
    
    // Test user credentials
    testEmail: 'test@example.com',
    testPassword: 'testpassword123',
    testUserName: 'API Test User'
};

class BlogAPITester {
    constructor() {
        this.client = new Client();
        this.account = null;
        this.databases = null;
        this.storage = null;
        this.currentUser = null;
    }

    async initialize() {
        console.log('üöÄ Initializing Appwrite client...');
        
        this.client
            .setEndpoint(config.endpoint)
            .setProject(config.projectId);

        this.account = new Account(this.client);
        this.databases = new Databases(this.client);
        this.storage = new Storage(this.client);

        console.log('‚úÖ Appwrite client initialized');
    }

    async createTestUser() {
        console.log('üë§ Creating test user...');
        
        try {
            const user = await this.account.create(
                ID.unique(),
                config.testEmail,
                config.testPassword,
                config.testUserName
            );
            
            console.log(`‚úÖ Test user created: ${user.$id}`);
            return user;
        } catch (error) {
            if (error.code === 409) {
                console.log('‚ÑπÔ∏è  Test user already exists, proceeding with authentication');
                return null;
            }
            throw error;
        }
    }

    async authenticate() {
        console.log('üîê Authenticating user...');
        
        try {
            const session = await this.account.createEmailSession(
                config.testEmail,
                config.testPassword
            );
            
            this.currentUser = await this.account.get();
            console.log(`‚úÖ Authenticated as: ${this.currentUser.name} (${this.currentUser.email})`);
            
            return session;
        } catch (error) {
            console.error('‚ùå Authentication failed:', error.message);
            throw error;
        }
    }

    async testCollections() {
        console.log('üóÑÔ∏è  Testing database collections...');
        
        const collections = [
            { name: 'Posts', id: config.collectionId },
            { name: 'Comments', id: 'comments' },
            { name: 'Categories', id: 'categories' },
            { name: 'Tags', id: 'tags' },
            { name: 'User Profiles', id: 'user_profiles' },
            { name: 'Notifications', id: 'notifications' }
        ];

        const results = [];
        
        for (const collection of collections) {
            try {
                await this.databases.listDocuments(config.databaseId, collection.id, []);
                console.log(`‚úÖ ${collection.name} collection: OK`);
                results.push({ name: collection.name, status: 'OK' });
            } catch (error) {
                console.log(`‚ùå ${collection.name} collection: ${error.message}`);
                results.push({ name: collection.name, status: 'MISSING', error: error.message });
            }
        }

        return results;
    }

    async createSampleImage() {
        console.log('üñºÔ∏è  Creating sample image for testing...');
        
        // Create a simple SVG image for testing
        const svgContent = `
<svg width="400" height="300" xmlns="http://www.w3.org/2000/svg">
    <rect width="400" height="300" fill="#4F46E5"/>
    <text x="200" y="150" font-family="Arial" font-size="24" fill="white" text-anchor="middle">
        Test Blog Image
    </text>
    <text x="200" y="180" font-family="Arial" font-size="16" fill="white" text-anchor="middle">
        Generated by API Test
    </text>
</svg>`;

        const imagePath = path.join(__dirname, 'test-image.svg');
        fs.writeFileSync(imagePath, svgContent);
        
        return imagePath;
    }

    async uploadTestImage() {
        console.log('üì§ Uploading test image...');
        
        try {
            const imagePath = await this.createSampleImage();
            const imageBuffer = fs.readFileSync(imagePath);
            
            const file = await this.storage.createFile(
                config.bucketId,
                ID.unique(),
                imageBuffer,
                ['image/svg+xml']
            );
            
            console.log(`‚úÖ Image uploaded: ${file.$id}`);
            
            // Clean up test image
            fs.unlinkSync(imagePath);
            
            return file.$id;
        } catch (error) {
            console.log(`‚ö†Ô∏è  Image upload failed: ${error.message}`);
            return null;
        }
    }

    async createTestBlogPost() {
        console.log('üìù Creating test blog post...');
        
        const timestamp = new Date().toISOString();
        const slug = `api-test-post-${Date.now()}`;
        
        // Upload test image
        const featuredImageId = await this.uploadTestImage();
        
        const postData = {
            title: `API Test Blog Post - ${new Date().toLocaleString()}`,
            content: `
# API Test Blog Post

This blog post was created via the **API test script** to verify the blog creation functionality.

## Test Details:
- **Created**: ${timestamp}
- **Author**: ${this.currentUser.name}
- **Method**: Programmatic API call
- **Featured Image**: ${featuredImageId ? 'Uploaded successfully' : 'Upload failed'}

## Enhanced Features Tested:
- ‚úÖ User authentication
- ‚úÖ Post creation with metadata
- ‚úÖ Image upload integration
- ‚úÖ Categories and tags support
- ‚úÖ Timestamp tracking

## Sample Content:

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris.

### Code Example:
\`\`\`javascript
async function createBlogPost() {
    const post = await databases.createDocument(
        databaseId,
        collectionId,
        slug,
        postData
    );
    console.log('Blog post created:', post.$id);
}
\`\`\`

This demonstrates that the blog creation API is working correctly! üéâ

---
*Generated by MegaBlog API Test Script*
            `,
            featuredimage: featuredImageId || 'default-image-id',
            status: true,
            userId: this.currentUser.$id,
            categories: ['technology', 'testing'],
            tags: ['api', 'test', 'automation', 'nodejs'],
            createdAt: timestamp,
            updatedAt: timestamp,
            viewCount: 0,
            likeCount: 0
        };

        try {
            const post = await this.databases.createDocument(
                config.databaseId,
                config.collectionId,
                slug,
                postData
            );

            console.log('‚úÖ Blog post created successfully!');
            console.log(`   - ID: ${post.$id}`);
            console.log(`   - Title: ${post.title}`);
            console.log(`   - Status: ${post.status ? 'Published' : 'Draft'}`);
            console.log(`   - Categories: ${post.categories.join(', ')}`);
            console.log(`   - Tags: ${post.tags.join(', ')}`);
            console.log(`   - Featured Image: ${post.featuredimage}`);
            console.log(`   - Created: ${post.createdAt}`);

            return post;
        } catch (error) {
            console.error('‚ùå Failed to create blog post:', error.message);
            throw error;
        }
    }

    async runFullTest() {
        console.log('üß™ Starting comprehensive blog API test...\n');
        
        try {
            // Initialize
            await this.initialize();
            
            // Create test user (if needed)
            await this.createTestUser();
            
            // Authenticate
            await this.authenticate();
            
            // Test collections
            const collectionResults = await this.testCollections();
            
            // Create test blog post
            const post = await this.createTestBlogPost();
            
            // Summary
            console.log('\nüéâ TEST SUMMARY:');
            console.log('================');
            console.log(`‚úÖ Authentication: SUCCESS`);
            console.log(`‚úÖ Blog Post Creation: SUCCESS`);
            console.log(`‚úÖ Enhanced Features: TESTED`);
            
            const failedCollections = collectionResults.filter(r => r.status !== 'OK');
            if (failedCollections.length > 0) {
                console.log(`‚ö†Ô∏è  Missing Collections: ${failedCollections.length}`);
                failedCollections.forEach(col => {
                    console.log(`   - ${col.name}: ${col.error}`);
                });
                console.log('\nüìñ Refer to APPWRITE_SETUP.md for collection setup instructions');
            } else {
                console.log(`‚úÖ All Collections: AVAILABLE`);
            }
            
            console.log(`\nüîó Post URL: /post/${post.$id}`);
            console.log('\n‚ú® Blog creation API is working correctly!');
            
        } catch (error) {
            console.error('\n‚ùå TEST FAILED:', error.message);
            console.error('\nüîß Troubleshooting:');
            console.error('1. Check your Appwrite configuration in this script');
            console.error('2. Ensure your database and collections exist');
            console.error('3. Verify permissions are set correctly');
            console.error('4. Check the APPWRITE_SETUP.md guide');
            
            process.exit(1);
        }
    }
}

// Check if configuration is set
function checkConfiguration() {
    const requiredFields = ['projectId', 'databaseId', 'collectionId'];
    const missingFields = requiredFields.filter(field => 
        !config[field] || config[field].startsWith('YOUR_')
    );
    
    if (missingFields.length > 0) {
        console.error('‚ùå Configuration Error:');
        console.error('Please update the configuration at the top of this script:');
        missingFields.forEach(field => {
            console.error(`   - ${field}: Currently "${config[field]}"`);
        });
        console.error('\nüìñ Check your Appwrite console for the correct values');
        process.exit(1);
    }
}

// Main execution
async function main() {
    console.log('üöÄ MegaBlog API Test Script');
    console.log('============================\n');
    
    // Check configuration
    checkConfiguration();
    
    // Run tests
    const tester = new BlogAPITester();
    await tester.runFullTest();
}

// Run if called directly
if (require.main === module) {
    main().catch(error => {
        console.error('üí• Unexpected error:', error);
        process.exit(1);
    });
}

module.exports = BlogAPITester;